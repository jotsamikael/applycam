/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addSpeciality } from '../fn/speciality-controller/add-speciality';
import { AddSpeciality$Params } from '../fn/speciality-controller/add-speciality';
import { createSpeciality } from '../fn/speciality-controller/create-speciality';
import { CreateSpeciality$Params } from '../fn/speciality-controller/create-speciality';
import { getall } from '../fn/speciality-controller/getall';
import { Getall$Params } from '../fn/speciality-controller/getall';
import { getAllSpeciality } from '../fn/speciality-controller/get-all-speciality';
import { GetAllSpeciality$Params } from '../fn/speciality-controller/get-all-speciality';
import { PageResponseSpecialityResponse } from '../models/page-response-speciality-response';

@Injectable({ providedIn: 'root' })
export class SpecialityControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createSpeciality()` */
  static readonly CreateSpecialityPath = '/specialities/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createSpeciality()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSpeciality$Response(params: CreateSpeciality$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return createSpeciality(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createSpeciality$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSpeciality(params: CreateSpeciality$Params, context?: HttpContext): Observable<string> {
    return this.createSpeciality$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `addSpeciality()` */
  static readonly AddSpecialityPath = '/specialities/add-speciality';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addSpeciality()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSpeciality$Response(params: AddSpeciality$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return addSpeciality(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addSpeciality$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSpeciality(params: AddSpeciality$Params, context?: HttpContext): Observable<string> {
    return this.addSpeciality$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getAllSpeciality()` */
  static readonly GetAllSpecialityPath = '/specialities/get-all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSpeciality()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSpeciality$Response(params: GetAllSpeciality$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSpecialityResponse>> {
    return getAllSpeciality(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSpeciality$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSpeciality(params: GetAllSpeciality$Params, context?: HttpContext): Observable<PageResponseSpecialityResponse> {
    return this.getAllSpeciality$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSpecialityResponse>): PageResponseSpecialityResponse => r.body)
    );
  }

  /** Path part for operation `getall()` */
  static readonly GetallPath = '/specialities/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getall()` instead.
   *
   * This method doesn't expect any request body.
   */
  getall$Response(params?: Getall$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSpecialityResponse>> {
    return getall(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getall$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getall(params?: Getall$Params, context?: HttpContext): Observable<PageResponseSpecialityResponse> {
    return this.getall$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSpecialityResponse>): PageResponseSpecialityResponse => r.body)
    );
  }

}
