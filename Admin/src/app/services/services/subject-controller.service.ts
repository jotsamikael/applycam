/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addSubjectBySpecialityId } from '../fn/subject-controller/add-subject-by-speciality-id';
import { AddSubjectBySpecialityId$Params } from '../fn/subject-controller/add-subject-by-speciality-id';
import { createCourse } from '../fn/subject-controller/create-course';
import { CreateCourse$Params } from '../fn/subject-controller/create-course';
import { getAllCourse } from '../fn/subject-controller/get-all-course';
import { GetAllCourse$Params } from '../fn/subject-controller/get-all-course';
import { PageResponseSubjectResponse } from '../models/page-response-subject-response';

@Injectable({ providedIn: 'root' })
export class SubjectControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createCourse()` */
  static readonly CreateCoursePath = '/subjects/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createCourse()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCourse$Response(params: CreateCourse$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return createCourse(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createCourse$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCourse(params: CreateCourse$Params, context?: HttpContext): Observable<string> {
    return this.createCourse$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `addSubjectBySpecialityId()` */
  static readonly AddSubjectBySpecialityIdPath = '/subjects/add-Subject';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addSubjectBySpecialityId()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSubjectBySpecialityId$Response(params: AddSubjectBySpecialityId$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return addSubjectBySpecialityId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addSubjectBySpecialityId$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSubjectBySpecialityId(params: AddSubjectBySpecialityId$Params, context?: HttpContext): Observable<string> {
    return this.addSubjectBySpecialityId$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getAllCourse()` */
  static readonly GetAllCoursePath = '/subjects/get-all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllCourse()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCourse$Response(params: GetAllCourse$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSubjectResponse>> {
    return getAllCourse(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllCourse$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCourse(params: GetAllCourse$Params, context?: HttpContext): Observable<PageResponseSubjectResponse> {
    return this.getAllCourse$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSubjectResponse>): PageResponseSubjectResponse => r.body)
    );
  }

}
