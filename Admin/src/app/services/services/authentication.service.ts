/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addCoursesToTrainingCenter } from '../fn/authentication/add-courses-to-training-center';
import { AddCoursesToTrainingCenter$Params } from '../fn/authentication/add-courses-to-training-center';
import { addSpecialitiesToTrainingCenter1 } from '../fn/authentication/add-specialities-to-training-center-1';
import { AddSpecialitiesToTrainingCenter1$Params } from '../fn/authentication/add-specialities-to-training-center-1';
import { authenticate } from '../fn/authentication/authenticate';
import { Authenticate$Params } from '../fn/authentication/authenticate';
import { AuthenticationResponse } from '../models/authentication-response';
import { confirm } from '../fn/authentication/confirm';
import { Confirm$Params } from '../fn/authentication/confirm';
import { createAndLinkSpecialityToTrainingCenter } from '../fn/authentication/create-and-link-speciality-to-training-center';
import { CreateAndLinkSpecialityToTrainingCenter$Params } from '../fn/authentication/create-and-link-speciality-to-training-center';
import { createPromoter } from '../fn/authentication/create-promoter';
import { CreatePromoter$Params } from '../fn/authentication/create-promoter';
import { getall2 } from '../fn/authentication/getall-2';
import { Getall2$Params } from '../fn/authentication/getall-2';
import { getAllCoursesWithSpecialitiesPaged } from '../fn/authentication/get-all-courses-with-specialities-paged';
import { GetAllCoursesWithSpecialitiesPaged$Params } from '../fn/authentication/get-all-courses-with-specialities-paged';
import { getAllTrainingCenters1 } from '../fn/authentication/get-all-training-centers-1';
import { GetAllTrainingCenters1$Params } from '../fn/authentication/get-all-training-centers-1';
import { PageResponseCourseWithSpecialitiesResponse } from '../models/page-response-course-with-specialities-response';
import { PageResponseSpecialityResponse } from '../models/page-response-speciality-response';
import { PageResponseTrainingCenterResponse } from '../models/page-response-training-center-response';
import { register } from '../fn/authentication/register';
import { Register$Params } from '../fn/authentication/register';
import { uploadPromoterFile } from '../fn/authentication/upload-promoter-file';
import { UploadPromoterFile$Params } from '../fn/authentication/upload-promoter-file';

@Injectable({ providedIn: 'root' })
export class AuthenticationService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createPromoter()` */
  static readonly CreatePromoterPath = '/auth/promoter-register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createPromoter()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createPromoter$Response(params: CreatePromoter$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return createPromoter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createPromoter$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createPromoter(params: CreatePromoter$Params, context?: HttpContext): Observable<{
}> {
    return this.createPromoter$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `uploadPromoterFile()` */
  static readonly UploadPromoterFilePath = '/auth/promoter-register/documents/{approval-Number}/{email}/{centerMail}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadPromoterFile()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPromoterFile$Response(params: UploadPromoterFile$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadPromoterFile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadPromoterFile$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPromoterFile(params: UploadPromoterFile$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadPromoterFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `createAndLinkSpecialityToTrainingCenter()` */
  static readonly CreateAndLinkSpecialityToTrainingCenterPath = '/auth/create-and-link';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createAndLinkSpecialityToTrainingCenter()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAndLinkSpecialityToTrainingCenter$Response(params: CreateAndLinkSpecialityToTrainingCenter$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return createAndLinkSpecialityToTrainingCenter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createAndLinkSpecialityToTrainingCenter$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAndLinkSpecialityToTrainingCenter(params: CreateAndLinkSpecialityToTrainingCenter$Params, context?: HttpContext): Observable<string> {
    return this.createAndLinkSpecialityToTrainingCenter$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `addCoursesToTrainingCenter()` */
  static readonly AddCoursesToTrainingCenterPath = '/auth/courses/{agreementNumber}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addCoursesToTrainingCenter()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCoursesToTrainingCenter$Response(params: AddCoursesToTrainingCenter$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return addCoursesToTrainingCenter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addCoursesToTrainingCenter$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCoursesToTrainingCenter(params: AddCoursesToTrainingCenter$Params, context?: HttpContext): Observable<string> {
    return this.addCoursesToTrainingCenter$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `register()` */
  static readonly RegisterPath = '/auth/candidate-register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `register()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  register$Response(params: Register$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return register(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `register$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  register(params: Register$Params, context?: HttpContext): Observable<{
}> {
    return this.register$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `authenticate()` */
  static readonly AuthenticatePath = '/auth/authenticate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authenticate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authenticate$Response(params: Authenticate$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthenticationResponse>> {
    return authenticate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authenticate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authenticate(params: Authenticate$Params, context?: HttpContext): Observable<AuthenticationResponse> {
    return this.authenticate$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthenticationResponse>): AuthenticationResponse => r.body)
    );
  }

  /** Path part for operation `addSpecialitiesToTrainingCenter1()` */
  static readonly AddSpecialitiesToTrainingCenter1Path = '/auth/link-to-center';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addSpecialitiesToTrainingCenter1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSpecialitiesToTrainingCenter1$Response(params: AddSpecialitiesToTrainingCenter1$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return addSpecialitiesToTrainingCenter1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addSpecialitiesToTrainingCenter1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSpecialitiesToTrainingCenter1(params: AddSpecialitiesToTrainingCenter1$Params, context?: HttpContext): Observable<string> {
    return this.addSpecialitiesToTrainingCenter1$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getAllTrainingCenters1()` */
  static readonly GetAllTrainingCenters1Path = '/auth/get-all-trainingCenter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTrainingCenters1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTrainingCenters1$Response(params?: GetAllTrainingCenters1$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseTrainingCenterResponse>> {
    return getAllTrainingCenters1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTrainingCenters1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTrainingCenters1(params?: GetAllTrainingCenters1$Params, context?: HttpContext): Observable<PageResponseTrainingCenterResponse> {
    return this.getAllTrainingCenters1$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseTrainingCenterResponse>): PageResponseTrainingCenterResponse => r.body)
    );
  }

  /** Path part for operation `getall2()` */
  static readonly Getall2Path = '/auth/get-all-speciality';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getall2()` instead.
   *
   * This method doesn't expect any request body.
   */
  getall2$Response(params?: Getall2$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSpecialityResponse>> {
    return getall2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getall2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getall2(params?: Getall2$Params, context?: HttpContext): Observable<PageResponseSpecialityResponse> {
    return this.getall2$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSpecialityResponse>): PageResponseSpecialityResponse => r.body)
    );
  }

  /** Path part for operation `getAllCoursesWithSpecialitiesPaged()` */
  static readonly GetAllCoursesWithSpecialitiesPagedPath = '/auth/courses-with-specialities';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllCoursesWithSpecialitiesPaged()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCoursesWithSpecialitiesPaged$Response(params?: GetAllCoursesWithSpecialitiesPaged$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCourseWithSpecialitiesResponse>> {
    return getAllCoursesWithSpecialitiesPaged(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllCoursesWithSpecialitiesPaged$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCoursesWithSpecialitiesPaged(params?: GetAllCoursesWithSpecialitiesPaged$Params, context?: HttpContext): Observable<PageResponseCourseWithSpecialitiesResponse> {
    return this.getAllCoursesWithSpecialitiesPaged$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCourseWithSpecialitiesResponse>): PageResponseCourseWithSpecialitiesResponse => r.body)
    );
  }

  /** Path part for operation `confirm()` */
  static readonly ConfirmPath = '/auth/activate-account';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `confirm()` instead.
   *
   * This method doesn't expect any request body.
   */
  confirm$Response(params: Confirm$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return confirm(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `confirm$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  confirm(params: Confirm$Params, context?: HttpContext): Observable<void> {
    return this.confirm$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
