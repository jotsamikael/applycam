/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { activateSpeciality } from '../fn/speciality/activate-speciality';
import { ActivateSpeciality$Params } from '../fn/speciality/activate-speciality';
import { addSpecialities } from '../fn/speciality/add-specialities';
import { AddSpecialities$Params } from '../fn/speciality/add-specialities';
import { addSpecialitiesToTrainingCenter } from '../fn/speciality/add-specialities-to-training-center';
import { AddSpecialitiesToTrainingCenter$Params } from '../fn/speciality/add-specialities-to-training-center';
import { addSpecialityToCourse } from '../fn/speciality/add-speciality-to-course';
import { AddSpecialityToCourse$Params } from '../fn/speciality/add-speciality-to-course';
import { CourseWithSpecialitiesResponse } from '../models/course-with-specialities-response';
import { createSpeciality } from '../fn/speciality/create-speciality';
import { CreateSpeciality$Params } from '../fn/speciality/create-speciality';
import { findByName1 } from '../fn/speciality/find-by-name-1';
import { FindByName1$Params } from '../fn/speciality/find-by-name-1';
import { getall } from '../fn/speciality/getall';
import { Getall$Params } from '../fn/speciality/getall';
import { getAllSpecialityByTrainingCenter } from '../fn/speciality/get-all-speciality-by-training-center';
import { GetAllSpecialityByTrainingCenter$Params } from '../fn/speciality/get-all-speciality-by-training-center';
import { getAllSpecialityOfCourse } from '../fn/speciality/get-all-speciality-of-course';
import { GetAllSpecialityOfCourse$Params } from '../fn/speciality/get-all-speciality-of-course';
import { getAllSpecialityOfCourse1 } from '../fn/speciality/get-all-speciality-of-course-1';
import { GetAllSpecialityOfCourse1$Params } from '../fn/speciality/get-all-speciality-of-course-1';
import { getCoursesAndSpecialitiesForCenter } from '../fn/speciality/get-courses-and-specialities-for-center';
import { GetCoursesAndSpecialitiesForCenter$Params } from '../fn/speciality/get-courses-and-specialities-for-center';
import { PageResponseSpecialityResponse } from '../models/page-response-speciality-response';
import { removeSpecialities } from '../fn/speciality/remove-specialities';
import { RemoveSpecialities$Params } from '../fn/speciality/remove-specialities';
import { removeSpecialitiesFromTrainingCenter } from '../fn/speciality/remove-specialities-from-training-center';
import { RemoveSpecialitiesFromTrainingCenter$Params } from '../fn/speciality/remove-specialities-from-training-center';
import { SpecialityResponse } from '../models/speciality-response';
import { toogleCourse1 } from '../fn/speciality/toogle-course-1';
import { ToogleCourse1$Params } from '../fn/speciality/toogle-course-1';
import { updateCourse } from '../fn/speciality/update-course';
import { UpdateCourse$Params } from '../fn/speciality/update-course';

@Injectable({ providedIn: 'root' })
export class SpecialityService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createSpeciality()` */
  static readonly CreateSpecialityPath = '/specialities/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createSpeciality()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSpeciality$Response(params: CreateSpeciality$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return createSpeciality(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createSpeciality$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSpeciality(params: CreateSpeciality$Params, context?: HttpContext): Observable<string> {
    return this.createSpeciality$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `addSpecialities()` */
  static readonly AddSpecialitiesPath = '/specialities/add-specialities/{sessionId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addSpecialities()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSpecialities$Response(params: AddSpecialities$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return addSpecialities(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addSpecialities$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSpecialities(params: AddSpecialities$Params, context?: HttpContext): Observable<string> {
    return this.addSpecialities$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `updateCourse()` */
  static readonly UpdateCoursePath = '/specialities/update-speciality';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCourse()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCourse$Response(params: UpdateCourse$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return updateCourse(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCourse$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCourse(params: UpdateCourse$Params, context?: HttpContext): Observable<string> {
    return this.updateCourse$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `toogleCourse1()` */
  static readonly ToogleCourse1Path = '/specialities/toggle-Speciality/{name}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `toogleCourse1()` instead.
   *
   * This method doesn't expect any request body.
   */
  toogleCourse1$Response(params: ToogleCourse1$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return toogleCourse1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `toogleCourse1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  toogleCourse1(params: ToogleCourse1$Params, context?: HttpContext): Observable<{
}> {
    return this.toogleCourse1$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `addSpecialitiesToTrainingCenter()` */
  static readonly AddSpecialitiesToTrainingCenterPath = '/specialities/link-to-center';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addSpecialitiesToTrainingCenter()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSpecialitiesToTrainingCenter$Response(params: AddSpecialitiesToTrainingCenter$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return addSpecialitiesToTrainingCenter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addSpecialitiesToTrainingCenter$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSpecialitiesToTrainingCenter(params: AddSpecialitiesToTrainingCenter$Params, context?: HttpContext): Observable<string> {
    return this.addSpecialitiesToTrainingCenter$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `addSpecialityToCourse()` */
  static readonly AddSpecialityToCoursePath = '/specialities/add-speciality-to-course';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addSpecialityToCourse()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSpecialityToCourse$Response(params: AddSpecialityToCourse$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return addSpecialityToCourse(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addSpecialityToCourse$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSpecialityToCourse(params: AddSpecialityToCourse$Params, context?: HttpContext): Observable<string> {
    return this.addSpecialityToCourse$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `activateSpeciality()` */
  static readonly ActivateSpecialityPath = '/specialities/activate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `activateSpeciality()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  activateSpeciality$Response(params: ActivateSpeciality$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return activateSpeciality(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `activateSpeciality$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  activateSpeciality(params: ActivateSpeciality$Params, context?: HttpContext): Observable<string> {
    return this.activateSpeciality$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getCoursesAndSpecialitiesForCenter()` */
  static readonly GetCoursesAndSpecialitiesForCenterPath = '/specialities/training-center/offered-specialities-by-course/{agreementNumber}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCoursesAndSpecialitiesForCenter()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCoursesAndSpecialitiesForCenter$Response(params: GetCoursesAndSpecialitiesForCenter$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CourseWithSpecialitiesResponse>>> {
    return getCoursesAndSpecialitiesForCenter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCoursesAndSpecialitiesForCenter$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCoursesAndSpecialitiesForCenter(params: GetCoursesAndSpecialitiesForCenter$Params, context?: HttpContext): Observable<Array<CourseWithSpecialitiesResponse>> {
    return this.getCoursesAndSpecialitiesForCenter$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CourseWithSpecialitiesResponse>>): Array<CourseWithSpecialitiesResponse> => r.body)
    );
  }

  /** Path part for operation `getAllSpecialityByTrainingCenter()` */
  static readonly GetAllSpecialityByTrainingCenterPath = '/specialities/get-by-trainingcenter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSpecialityByTrainingCenter()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSpecialityByTrainingCenter$Response(params: GetAllSpecialityByTrainingCenter$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSpecialityResponse>> {
    return getAllSpecialityByTrainingCenter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSpecialityByTrainingCenter$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSpecialityByTrainingCenter(params: GetAllSpecialityByTrainingCenter$Params, context?: HttpContext): Observable<PageResponseSpecialityResponse> {
    return this.getAllSpecialityByTrainingCenter$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSpecialityResponse>): PageResponseSpecialityResponse => r.body)
    );
  }

  /** Path part for operation `getAllSpecialityOfCourse()` */
  static readonly GetAllSpecialityOfCoursePath = '/specialities/get-by-course';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSpecialityOfCourse()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSpecialityOfCourse$Response(params: GetAllSpecialityOfCourse$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSpecialityResponse>> {
    return getAllSpecialityOfCourse(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSpecialityOfCourse$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSpecialityOfCourse(params: GetAllSpecialityOfCourse$Params, context?: HttpContext): Observable<PageResponseSpecialityResponse> {
    return this.getAllSpecialityOfCourse$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSpecialityResponse>): PageResponseSpecialityResponse => r.body)
    );
  }

  /** Path part for operation `getAllSpecialityOfCourse1()` */
  static readonly GetAllSpecialityOfCourse1Path = '/specialities/get-by-Exam/{examType}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSpecialityOfCourse1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSpecialityOfCourse1$Response(params: GetAllSpecialityOfCourse1$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSpecialityResponse>> {
    return getAllSpecialityOfCourse1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSpecialityOfCourse1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSpecialityOfCourse1(params: GetAllSpecialityOfCourse1$Params, context?: HttpContext): Observable<PageResponseSpecialityResponse> {
    return this.getAllSpecialityOfCourse1$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSpecialityResponse>): PageResponseSpecialityResponse => r.body)
    );
  }

  /** Path part for operation `getall()` */
  static readonly GetallPath = '/specialities/get-all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getall()` instead.
   *
   * This method doesn't expect any request body.
   */
  getall$Response(params?: Getall$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSpecialityResponse>> {
    return getall(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getall$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getall(params?: Getall$Params, context?: HttpContext): Observable<PageResponseSpecialityResponse> {
    return this.getall$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSpecialityResponse>): PageResponseSpecialityResponse => r.body)
    );
  }

  /** Path part for operation `findByName1()` */
  static readonly FindByName1Path = '/specialities/findByName/{name}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByName1()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByName1$Response(params: FindByName1$Params, context?: HttpContext): Observable<StrictHttpResponse<SpecialityResponse>> {
    return findByName1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByName1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByName1(params: FindByName1$Params, context?: HttpContext): Observable<SpecialityResponse> {
    return this.findByName1$Response(params, context).pipe(
      map((r: StrictHttpResponse<SpecialityResponse>): SpecialityResponse => r.body)
    );
  }

  /** Path part for operation `removeSpecialities()` */
  static readonly RemoveSpecialitiesPath = '/specialities/{agreementNumber}/remove-specialities';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeSpecialities()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  removeSpecialities$Response(params: RemoveSpecialities$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return removeSpecialities(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeSpecialities$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  removeSpecialities(params: RemoveSpecialities$Params, context?: HttpContext): Observable<string> {
    return this.removeSpecialities$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `removeSpecialitiesFromTrainingCenter()` */
  static readonly RemoveSpecialitiesFromTrainingCenterPath = '/specialities/specialities/{agreementNumber}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeSpecialitiesFromTrainingCenter()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  removeSpecialitiesFromTrainingCenter$Response(params: RemoveSpecialitiesFromTrainingCenter$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return removeSpecialitiesFromTrainingCenter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeSpecialitiesFromTrainingCenter$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  removeSpecialitiesFromTrainingCenter(params: RemoveSpecialitiesFromTrainingCenter$Params, context?: HttpContext): Observable<string> {
    return this.removeSpecialitiesFromTrainingCenter$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
