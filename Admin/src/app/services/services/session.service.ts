/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createSession } from '../fn/session/create-session';
import { CreateSession$Params } from '../fn/session/create-session';
import { deleteSession } from '../fn/session/delete-session';
import { DeleteSession$Params } from '../fn/session/delete-session';
import { findByName2 } from '../fn/session/find-by-name-2';
import { FindByName2$Params } from '../fn/session/find-by-name-2';
import { findSessionByYear } from '../fn/session/find-session-by-year';
import { FindSessionByYear$Params } from '../fn/session/find-session-by-year';
import { getall1 } from '../fn/session/getall-1';
import { Getall1$Params } from '../fn/session/getall-1';
import { PageResponseSessionResponse } from '../models/page-response-session-response';
import { SessionResponse } from '../models/session-response';
import { updateSession } from '../fn/session/update-session';
import { UpdateSession$Params } from '../fn/session/update-session';

@Injectable({ providedIn: 'root' })
export class SessionService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createSession()` */
  static readonly CreateSessionPath = '/session/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createSession()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSession$Response(params: CreateSession$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return createSession(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createSession$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSession(params: CreateSession$Params, context?: HttpContext): Observable<string> {
    return this.createSession$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `updateSession()` */
  static readonly UpdateSessionPath = '/session/update-session';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSession()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSession$Response(params: UpdateSession$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateSession(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSession$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSession(params: UpdateSession$Params, context?: HttpContext): Observable<number> {
    return this.updateSession$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `deleteSession()` */
  static readonly DeleteSessionPath = '/session/delete-session/{sessionId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSession()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSession$Response(params: DeleteSession$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteSession(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteSession$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSession(params: DeleteSession$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteSession$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `findSessionByYear()` */
  static readonly FindSessionByYearPath = '/session/get-by-year/{sessionYear}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findSessionByYear()` instead.
   *
   * This method doesn't expect any request body.
   */
  findSessionByYear$Response(params: FindSessionByYear$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSessionResponse>> {
    return findSessionByYear(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findSessionByYear$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findSessionByYear(params: FindSessionByYear$Params, context?: HttpContext): Observable<PageResponseSessionResponse> {
    return this.findSessionByYear$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSessionResponse>): PageResponseSessionResponse => r.body)
    );
  }

  /** Path part for operation `getall1()` */
  static readonly Getall1Path = '/session/get-all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getall1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getall1$Response(params?: Getall1$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSessionResponse>> {
    return getall1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getall1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getall1(params?: Getall1$Params, context?: HttpContext): Observable<PageResponseSessionResponse> {
    return this.getall1$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSessionResponse>): PageResponseSessionResponse => r.body)
    );
  }

  /** Path part for operation `findByName2()` */
  static readonly FindByName2Path = '/session/findBy-examdate/{examDate}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByName2()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByName2$Response(params: FindByName2$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SessionResponse>>> {
    return findByName2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByName2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByName2(params: FindByName2$Params, context?: HttpContext): Observable<Array<SessionResponse>> {
    return this.findByName2$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SessionResponse>>): Array<SessionResponse> => r.body)
    );
  }

}
