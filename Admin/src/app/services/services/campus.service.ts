/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CampusResponse } from '../models/campus-response';
import { createCampus } from '../fn/campus/create-campus';
import { CreateCampus$Params } from '../fn/campus/create-campus';
import { findCampusByTown } from '../fn/campus/find-campus-by-town';
import { FindCampusByTown$Params } from '../fn/campus/find-campus-by-town';
import { findCampusByTrainingCenter } from '../fn/campus/find-campus-by-training-center';
import { FindCampusByTrainingCenter$Params } from '../fn/campus/find-campus-by-training-center';
import { PageResponseCampusResponse } from '../models/page-response-campus-response';

@Injectable({ providedIn: 'root' })
export class CampusService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createCampus()` */
  static readonly CreateCampusPath = '/campus';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createCampus()` instead.
   *
   * This method doesn't expect any request body.
   */
  createCampus$Response(params: CreateCampus$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return createCampus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createCampus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  createCampus(params: CreateCampus$Params, context?: HttpContext): Observable<string> {
    return this.createCampus$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `findCampusByTown()` */
  static readonly FindCampusByTownPath = '/campus/get-campus-by-training-town/{town}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findCampusByTown()` instead.
   *
   * This method doesn't expect any request body.
   */
  findCampusByTown$Response(params: FindCampusByTown$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCampusResponse>> {
    return findCampusByTown(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findCampusByTown$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findCampusByTown(params: FindCampusByTown$Params, context?: HttpContext): Observable<PageResponseCampusResponse> {
    return this.findCampusByTown$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCampusResponse>): PageResponseCampusResponse => r.body)
    );
  }

  /** Path part for operation `findCampusByTrainingCenter()` */
  static readonly FindCampusByTrainingCenterPath = '/campus/get-campus-by-training-center/{agreementNumber}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findCampusByTrainingCenter()` instead.
   *
   * This method doesn't expect any request body.
   */
  findCampusByTrainingCenter$Response(params: FindCampusByTrainingCenter$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CampusResponse>>> {
    return findCampusByTrainingCenter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findCampusByTrainingCenter$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findCampusByTrainingCenter(params: FindCampusByTrainingCenter$Params, context?: HttpContext): Observable<Array<CampusResponse>> {
    return this.findCampusByTrainingCenter$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CampusResponse>>): Array<CampusResponse> => r.body)
    );
  }

}
