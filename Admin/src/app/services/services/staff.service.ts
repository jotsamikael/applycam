/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createStaff } from '../fn/staff/create-staff';
import { CreateStaff$Params } from '../fn/staff/create-staff';
import { findStaffByEmail } from '../fn/staff/find-staff-by-email';
import { FindStaffByEmail$Params } from '../fn/staff/find-staff-by-email';
import { getAllStaffs } from '../fn/staff/get-all-staffs';
import { GetAllStaffs$Params } from '../fn/staff/get-all-staffs';
import { PageResponseStaffResponse } from '../models/page-response-staff-response';
import { StaffResponse } from '../models/staff-response';
import { toogleStaff } from '../fn/staff/toogle-staff';
import { ToogleStaff$Params } from '../fn/staff/toogle-staff';
import { updateStaff } from '../fn/staff/update-staff';
import { UpdateStaff$Params } from '../fn/staff/update-staff';

@Injectable({ providedIn: 'root' })
export class StaffService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createStaff()` */
  static readonly CreateStaffPath = '/staff/create-staff';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createStaff()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createStaff$Response(params: CreateStaff$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return createStaff(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createStaff$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createStaff(params: CreateStaff$Params, context?: HttpContext): Observable<string> {
    return this.createStaff$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `updateStaff()` */
  static readonly UpdateStaffPath = '/staff/update-staff/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateStaff()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateStaff$Response(params: UpdateStaff$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return updateStaff(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateStaff$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateStaff(params: UpdateStaff$Params, context?: HttpContext): Observable<string> {
    return this.updateStaff$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `toogleStaff()` */
  static readonly ToogleStaffPath = '/staff/toggle-staff/{fullName}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `toogleStaff()` instead.
   *
   * This method doesn't expect any request body.
   */
  toogleStaff$Response(params: ToogleStaff$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return toogleStaff(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `toogleStaff$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  toogleStaff(params: ToogleStaff$Params, context?: HttpContext): Observable<{
}> {
    return this.toogleStaff$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllStaffs()` */
  static readonly GetAllStaffsPath = '/staff/getAll';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllStaffs()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllStaffs$Response(params?: GetAllStaffs$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseStaffResponse>> {
    return getAllStaffs(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllStaffs$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllStaffs(params?: GetAllStaffs$Params, context?: HttpContext): Observable<PageResponseStaffResponse> {
    return this.getAllStaffs$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseStaffResponse>): PageResponseStaffResponse => r.body)
    );
  }

  /** Path part for operation `findStaffByEmail()` */
  static readonly FindStaffByEmailPath = '/staff/find-by-email';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findStaffByEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  findStaffByEmail$Response(params: FindStaffByEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<StaffResponse>> {
    return findStaffByEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findStaffByEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findStaffByEmail(params: FindStaffByEmail$Params, context?: HttpContext): Observable<StaffResponse> {
    return this.findStaffByEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<StaffResponse>): StaffResponse => r.body)
    );
  }

}
