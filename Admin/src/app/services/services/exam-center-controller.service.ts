/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { assignExamCenter } from '../fn/exam-center-controller/assign-exam-center';
import { AssignExamCenter$Params } from '../fn/exam-center-controller/assign-exam-center';
import { createExamCenter } from '../fn/exam-center-controller/create-exam-center';
import { CreateExamCenter$Params } from '../fn/exam-center-controller/create-exam-center';
import { deleteSession1 } from '../fn/exam-center-controller/delete-session-1';
import { DeleteSession1$Params } from '../fn/exam-center-controller/delete-session-1';
import { findByName4 } from '../fn/exam-center-controller/find-by-name-4';
import { FindByName4$Params } from '../fn/exam-center-controller/find-by-name-4';
import { getAllExamCenters } from '../fn/exam-center-controller/get-all-exam-centers';
import { GetAllExamCenters$Params } from '../fn/exam-center-controller/get-all-exam-centers';
import { PageResponseExamCenterResponse } from '../models/page-response-exam-center-response';
import { updateExamCenter } from '../fn/exam-center-controller/update-exam-center';
import { UpdateExamCenter$Params } from '../fn/exam-center-controller/update-exam-center';

@Injectable({ providedIn: 'root' })
export class ExamCenterControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createExamCenter()` */
  static readonly CreateExamCenterPath = '/assignment/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createExamCenter()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createExamCenter$Response(params: CreateExamCenter$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return createExamCenter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createExamCenter$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createExamCenter(params: CreateExamCenter$Params, context?: HttpContext): Observable<string> {
    return this.createExamCenter$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `assignExamCenter()` */
  static readonly AssignExamCenterPath = '/assignment/assign-exam-center/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignExamCenter()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignExamCenter$Response(params: AssignExamCenter$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return assignExamCenter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignExamCenter$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignExamCenter(params: AssignExamCenter$Params, context?: HttpContext): Observable<void> {
    return this.assignExamCenter$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateExamCenter()` */
  static readonly UpdateExamCenterPath = '/assignment/update-Center';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateExamCenter()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateExamCenter$Response(params: UpdateExamCenter$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateExamCenter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateExamCenter$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateExamCenter(params: UpdateExamCenter$Params, context?: HttpContext): Observable<number> {
    return this.updateExamCenter$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `deleteSession1()` */
  static readonly DeleteSession1Path = '/assignment/delete-Center/{examCenterId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSession1()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSession1$Response(params: DeleteSession1$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteSession1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteSession1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSession1(params: DeleteSession1$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteSession1$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllExamCenters()` */
  static readonly GetAllExamCentersPath = '/assignment/get-all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllExamCenters()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllExamCenters$Response(params?: GetAllExamCenters$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseExamCenterResponse>> {
    return getAllExamCenters(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllExamCenters$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllExamCenters(params?: GetAllExamCenters$Params, context?: HttpContext): Observable<PageResponseExamCenterResponse> {
    return this.getAllExamCenters$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseExamCenterResponse>): PageResponseExamCenterResponse => r.body)
    );
  }

  /** Path part for operation `findByName4()` */
  static readonly FindByName4Path = '/assignment/findBy-division/{division}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByName4()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByName4$Response(params: FindByName4$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseExamCenterResponse>> {
    return findByName4(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByName4$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByName4(params: FindByName4$Params, context?: HttpContext): Observable<PageResponseExamCenterResponse> {
    return this.findByName4$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseExamCenterResponse>): PageResponseExamCenterResponse => r.body)
    );
  }

}
