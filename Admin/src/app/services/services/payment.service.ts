/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createPayment } from '../fn/payment/create-payment';
import { CreatePayment$Params } from '../fn/payment/create-payment';
import { deletePayment } from '../fn/payment/delete-payment';
import { DeletePayment$Params } from '../fn/payment/delete-payment';
import { getAllPayments } from '../fn/payment/get-all-payments';
import { GetAllPayments$Params } from '../fn/payment/get-all-payments';
import { PageResponsePaymentResponse } from '../models/page-response-payment-response';
import { updatePayment } from '../fn/payment/update-payment';
import { UpdatePayment$Params } from '../fn/payment/update-payment';

@Injectable({ providedIn: 'root' })
export class PaymentService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createPayment()` */
  static readonly CreatePaymentPath = '/payment/create-payment';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createPayment()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createPayment$Response(params: CreatePayment$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return createPayment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createPayment$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createPayment(params: CreatePayment$Params, context?: HttpContext): Observable<string> {
    return this.createPayment$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `updatePayment()` */
  static readonly UpdatePaymentPath = '/payment/update-payment/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePayment()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePayment$Response(params: UpdatePayment$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return updatePayment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePayment$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePayment(params: UpdatePayment$Params, context?: HttpContext): Observable<string> {
    return this.updatePayment$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getAllPayments()` */
  static readonly GetAllPaymentsPath = '/payment/get-all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPayments()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPayments$Response(params?: GetAllPayments$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePaymentResponse>> {
    return getAllPayments(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPayments$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPayments(params?: GetAllPayments$Params, context?: HttpContext): Observable<PageResponsePaymentResponse> {
    return this.getAllPayments$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePaymentResponse>): PageResponsePaymentResponse => r.body)
    );
  }

  /** Path part for operation `deletePayment()` */
  static readonly DeletePaymentPath = '/payment/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deletePayment()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePayment$Response(params: DeletePayment$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deletePayment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deletePayment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePayment(params: DeletePayment$Params, context?: HttpContext): Observable<void> {
    return this.deletePayment$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
