/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addSubjectBySpecialityId } from '../fn/subject/add-subject-by-speciality-id';
import { AddSubjectBySpecialityId$Params } from '../fn/subject/add-subject-by-speciality-id';
import { createSubject } from '../fn/subject/create-subject';
import { CreateSubject$Params } from '../fn/subject/create-subject';
import { findByName } from '../fn/subject/find-by-name';
import { FindByName$Params } from '../fn/subject/find-by-name';
import { getAllSubjectOfSpeciality } from '../fn/subject/get-all-subject-of-speciality';
import { GetAllSubjectOfSpeciality$Params } from '../fn/subject/get-all-subject-of-speciality';
import { PageResponseSubjectResponse } from '../models/page-response-subject-response';
import { SubjectResponse } from '../models/subject-response';
import { toogleCourse } from '../fn/subject/toogle-course';
import { ToogleCourse$Params } from '../fn/subject/toogle-course';
import { updateSubject } from '../fn/subject/update-subject';
import { UpdateSubject$Params } from '../fn/subject/update-subject';

@Injectable({ providedIn: 'root' })
export class SubjectService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createSubject()` */
  static readonly CreateSubjectPath = '/subjects/create-subject';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createSubject()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSubject$Response(params: CreateSubject$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return createSubject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createSubject$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSubject(params: CreateSubject$Params, context?: HttpContext): Observable<string> {
    return this.createSubject$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `addSubjectBySpecialityId()` */
  static readonly AddSubjectBySpecialityIdPath = '/subjects/add-Subject';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addSubjectBySpecialityId()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSubjectBySpecialityId$Response(params: AddSubjectBySpecialityId$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return addSubjectBySpecialityId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addSubjectBySpecialityId$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSubjectBySpecialityId(params: AddSubjectBySpecialityId$Params, context?: HttpContext): Observable<string> {
    return this.addSubjectBySpecialityId$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `updateSubject()` */
  static readonly UpdateSubjectPath = '/subjects/update-subject';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSubject()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSubject$Response(params: UpdateSubject$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return updateSubject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSubject$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSubject(params: UpdateSubject$Params, context?: HttpContext): Observable<string> {
    return this.updateSubject$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `toogleCourse()` */
  static readonly ToogleCoursePath = '/subjects/toggle-subject/{name}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `toogleCourse()` instead.
   *
   * This method doesn't expect any request body.
   */
  toogleCourse$Response(params: ToogleCourse$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return toogleCourse(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `toogleCourse$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  toogleCourse(params: ToogleCourse$Params, context?: HttpContext): Observable<{
}> {
    return this.toogleCourse$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllSubjectOfSpeciality()` */
  static readonly GetAllSubjectOfSpecialityPath = '/subjects/get-all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSubjectOfSpeciality()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSubjectOfSpeciality$Response(params: GetAllSubjectOfSpeciality$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSubjectResponse>> {
    return getAllSubjectOfSpeciality(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSubjectOfSpeciality$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSubjectOfSpeciality(params: GetAllSubjectOfSpeciality$Params, context?: HttpContext): Observable<PageResponseSubjectResponse> {
    return this.getAllSubjectOfSpeciality$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSubjectResponse>): PageResponseSubjectResponse => r.body)
    );
  }

  /** Path part for operation `findByName()` */
  static readonly FindByNamePath = '/subjects/findByName/{name}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByName()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByName$Response(params: FindByName$Params, context?: HttpContext): Observable<StrictHttpResponse<SubjectResponse>> {
    return findByName(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByName$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByName(params: FindByName$Params, context?: HttpContext): Observable<SubjectResponse> {
    return this.findByName$Response(params, context).pipe(
      map((r: StrictHttpResponse<SubjectResponse>): SubjectResponse => r.body)
    );
  }

}
