/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { changeStatus } from '../fn/trainingcenter/change-status';
import { ChangeStatus$Params } from '../fn/trainingcenter/change-status';
import { createTrainingCenter } from '../fn/trainingcenter/create-training-center';
import { CreateTrainingCenter$Params } from '../fn/trainingcenter/create-training-center';
import { getAgreementStatus } from '../fn/trainingcenter/get-agreement-status';
import { GetAgreementStatus$Params } from '../fn/trainingcenter/get-agreement-status';
import { getAllTrainingCenters } from '../fn/trainingcenter/get-all-training-centers';
import { GetAllTrainingCenters$Params } from '../fn/trainingcenter/get-all-training-centers';
import { getTrainingCenterByAgreementNumber } from '../fn/trainingcenter/get-training-center-by-agreement-number';
import { GetTrainingCenterByAgreementNumber$Params } from '../fn/trainingcenter/get-training-center-by-agreement-number';
import { getTrainingCenterOfConnectedPromoter } from '../fn/trainingcenter/get-training-center-of-connected-promoter';
import { GetTrainingCenterOfConnectedPromoter$Params } from '../fn/trainingcenter/get-training-center-of-connected-promoter';
import { PageResponseTrainingCenterResponse } from '../models/page-response-training-center-response';
import { TrainingCenterResponse } from '../models/training-center-response';
import { updatePromoter } from '../fn/trainingcenter/update-promoter';
import { UpdatePromoter$Params } from '../fn/trainingcenter/update-promoter';
import { uploadAgreementFile } from '../fn/trainingcenter/upload-agreement-file';
import { UploadAgreementFile$Params } from '../fn/trainingcenter/upload-agreement-file';

@Injectable({ providedIn: 'root' })
export class TrainingcenterService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createTrainingCenter()` */
  static readonly CreateTrainingCenterPath = '/trainingcenter/create-training-center';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTrainingCenter()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTrainingCenter$Response(params: CreateTrainingCenter$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return createTrainingCenter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTrainingCenter$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTrainingCenter(params: CreateTrainingCenter$Params, context?: HttpContext): Observable<string> {
    return this.createTrainingCenter$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `uploadAgreementFile()` */
  static readonly UploadAgreementFilePath = '/trainingcenter/agreement/{agreement-number}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadAgreementFile()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadAgreementFile$Response(params: UploadAgreementFile$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadAgreementFile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadAgreementFile$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadAgreementFile(params: UploadAgreementFile$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadAgreementFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updatePromoter()` */
  static readonly UpdatePromoterPath = '/trainingcenter/update-trainingCenter/{fullname}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePromoter()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePromoter$Response(params: UpdatePromoter$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return updatePromoter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePromoter$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePromoter(params: UpdatePromoter$Params, context?: HttpContext): Observable<string> {
    return this.updatePromoter$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `changeStatus()` */
  static readonly ChangeStatusPath = '/trainingcenter/status/{agreementNumber}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  changeStatus$Response(params: ChangeStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: boolean;
}>> {
    return changeStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  changeStatus(params: ChangeStatus$Params, context?: HttpContext): Observable<{
[key: string]: boolean;
}> {
    return this.changeStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: boolean;
}>): {
[key: string]: boolean;
} => r.body)
    );
  }

  /** Path part for operation `getAgreementStatus()` */
  static readonly GetAgreementStatusPath = '/trainingcenter/getAgreementStatus/{agreement-number}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAgreementStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAgreementStatus$Response(params: GetAgreementStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getAgreementStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAgreementStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAgreementStatus(params: GetAgreementStatus$Params, context?: HttpContext): Observable<string> {
    return this.getAgreementStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getTrainingCenterOfConnectedPromoter()` */
  static readonly GetTrainingCenterOfConnectedPromoterPath = '/trainingcenter/get-training-centers-of-connected-promoter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTrainingCenterOfConnectedPromoter()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrainingCenterOfConnectedPromoter$Response(params?: GetTrainingCenterOfConnectedPromoter$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TrainingCenterResponse>>> {
    return getTrainingCenterOfConnectedPromoter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTrainingCenterOfConnectedPromoter$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrainingCenterOfConnectedPromoter(params?: GetTrainingCenterOfConnectedPromoter$Params, context?: HttpContext): Observable<Array<TrainingCenterResponse>> {
    return this.getTrainingCenterOfConnectedPromoter$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TrainingCenterResponse>>): Array<TrainingCenterResponse> => r.body)
    );
  }

  /** Path part for operation `getTrainingCenterByAgreementNumber()` */
  static readonly GetTrainingCenterByAgreementNumberPath = '/trainingcenter/get-training-by-agreement-number';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTrainingCenterByAgreementNumber()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrainingCenterByAgreementNumber$Response(params: GetTrainingCenterByAgreementNumber$Params, context?: HttpContext): Observable<StrictHttpResponse<TrainingCenterResponse>> {
    return getTrainingCenterByAgreementNumber(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTrainingCenterByAgreementNumber$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrainingCenterByAgreementNumber(params: GetTrainingCenterByAgreementNumber$Params, context?: HttpContext): Observable<TrainingCenterResponse> {
    return this.getTrainingCenterByAgreementNumber$Response(params, context).pipe(
      map((r: StrictHttpResponse<TrainingCenterResponse>): TrainingCenterResponse => r.body)
    );
  }

  /** Path part for operation `getAllTrainingCenters()` */
  static readonly GetAllTrainingCentersPath = '/trainingcenter/get-all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTrainingCenters()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTrainingCenters$Response(params?: GetAllTrainingCenters$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseTrainingCenterResponse>> {
    return getAllTrainingCenters(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTrainingCenters$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTrainingCenters(params?: GetAllTrainingCenters$Params, context?: HttpContext): Observable<PageResponseTrainingCenterResponse> {
    return this.getAllTrainingCenters$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseTrainingCenterResponse>): PageResponseTrainingCenterResponse => r.body)
    );
  }

}
