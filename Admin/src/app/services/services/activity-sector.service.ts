/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addMultipleCoursesToActivitySector } from '../fn/activity-sector/add-multiple-courses-to-activity-sector';
import { AddMultipleCoursesToActivitySector$Params } from '../fn/activity-sector/add-multiple-courses-to-activity-sector';
import { createActivitySector } from '../fn/activity-sector/create-activity-sector';
import { CreateActivitySector$Params } from '../fn/activity-sector/create-activity-sector';
import { delete$ } from '../fn/activity-sector/delete';
import { Delete$Params } from '../fn/activity-sector/delete';
import { findAllActivitySectors } from '../fn/activity-sector/find-all-activity-sectors';
import { FindAllActivitySectors$Params } from '../fn/activity-sector/find-all-activity-sectors';
import { PageResponseActivitySectorResponse } from '../models/page-response-activity-sector-response';
import { toggleActivitySector } from '../fn/activity-sector/toggle-activity-sector';
import { ToggleActivitySector$Params } from '../fn/activity-sector/toggle-activity-sector';
import { updateActivitySector } from '../fn/activity-sector/update-activity-sector';
import { UpdateActivitySector$Params } from '../fn/activity-sector/update-activity-sector';

@Injectable({ providedIn: 'root' })
export class ActivitySectorService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addMultipleCoursesToActivitySector()` */
  static readonly AddMultipleCoursesToActivitySectorPath = '/activitySector-management/{activitySectorName}/add-courses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addMultipleCoursesToActivitySector()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addMultipleCoursesToActivitySector$Response(params: AddMultipleCoursesToActivitySector$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return addMultipleCoursesToActivitySector(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addMultipleCoursesToActivitySector$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addMultipleCoursesToActivitySector(params: AddMultipleCoursesToActivitySector$Params, context?: HttpContext): Observable<string> {
    return this.addMultipleCoursesToActivitySector$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `createActivitySector()` */
  static readonly CreateActivitySectorPath = '/activitySector-management/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createActivitySector()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createActivitySector$Response(params: CreateActivitySector$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return createActivitySector(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createActivitySector$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createActivitySector(params: CreateActivitySector$Params, context?: HttpContext): Observable<string> {
    return this.createActivitySector$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `updateActivitySector()` */
  static readonly UpdateActivitySectorPath = '/activitySector-management/update/{name}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateActivitySector()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateActivitySector$Response(params: UpdateActivitySector$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return updateActivitySector(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateActivitySector$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateActivitySector(params: UpdateActivitySector$Params, context?: HttpContext): Observable<string> {
    return this.updateActivitySector$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `toggleActivitySector()` */
  static readonly ToggleActivitySectorPath = '/activitySector-management/toggle/{name}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `toggleActivitySector()` instead.
   *
   * This method doesn't expect any request body.
   */
  toggleActivitySector$Response(params: ToggleActivitySector$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return toggleActivitySector(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `toggleActivitySector$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  toggleActivitySector(params: ToggleActivitySector$Params, context?: HttpContext): Observable<void> {
    return this.toggleActivitySector$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `findAllActivitySectors()` */
  static readonly FindAllActivitySectorsPath = '/activitySector-management/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllActivitySectors()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllActivitySectors$Response(params?: FindAllActivitySectors$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseActivitySectorResponse>> {
    return findAllActivitySectors(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllActivitySectors$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllActivitySectors(params?: FindAllActivitySectors$Params, context?: HttpContext): Observable<PageResponseActivitySectorResponse> {
    return this.findAllActivitySectors$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseActivitySectorResponse>): PageResponseActivitySectorResponse => r.body)
    );
  }

  /** Path part for operation `delete()` */
  static readonly DeletePath = '/activitySector-management/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete$Response(params: Delete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return delete$(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete(params: Delete$Params, context?: HttpContext): Observable<void> {
    return this.delete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
