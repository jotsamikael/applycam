/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { findStaffByEmail1 } from '../fn/promoter/find-staff-by-email-1';
import { FindStaffByEmail1$Params } from '../fn/promoter/find-staff-by-email-1';
import { getAllStaffs1 } from '../fn/promoter/get-all-staffs-1';
import { GetAllStaffs1$Params } from '../fn/promoter/get-all-staffs-1';
import { nationalIdCardFileUpload } from '../fn/promoter/national-id-card-file-upload';
import { NationalIdCardFileUpload$Params } from '../fn/promoter/national-id-card-file-upload';
import { PageResponsePromoterResponse } from '../models/page-response-promoter-response';
import { PromoterResponse } from '../models/promoter-response';
import { resetPassword } from '../fn/promoter/reset-password';
import { ResetPassword$Params } from '../fn/promoter/reset-password';
import { togglePromoter } from '../fn/promoter/toggle-promoter';
import { TogglePromoter$Params } from '../fn/promoter/toggle-promoter';
import { updatePromoter } from '../fn/promoter/update-promoter';
import { UpdatePromoter$Params } from '../fn/promoter/update-promoter';

@Injectable({ providedIn: 'root' })
export class PromoterService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `nationalIdCardFileUpload()` */
  static readonly NationalIdCardFileUploadPath = '/promoter/nationalId/{validUntil}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `nationalIdCardFileUpload()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  nationalIdCardFileUpload$Response(params: NationalIdCardFileUpload$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return nationalIdCardFileUpload(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `nationalIdCardFileUpload$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  nationalIdCardFileUpload(params: NationalIdCardFileUpload$Params, context?: HttpContext): Observable<{
}> {
    return this.nationalIdCardFileUpload$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updatePromoter()` */
  static readonly UpdatePromoterPath = '/promoter/update-promoter/{email}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePromoter()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePromoter$Response(params: UpdatePromoter$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return updatePromoter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePromoter$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePromoter(params: UpdatePromoter$Params, context?: HttpContext): Observable<string> {
    return this.updatePromoter$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `togglePromoter()` */
  static readonly TogglePromoterPath = '/promoter/togglePromoterActivation/{email}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `togglePromoter()` instead.
   *
   * This method doesn't expect any request body.
   */
  togglePromoter$Response(params: TogglePromoter$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return togglePromoter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `togglePromoter$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  togglePromoter(params: TogglePromoter$Params, context?: HttpContext): Observable<void> {
    return this.togglePromoter$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `resetPassword()` */
  static readonly ResetPasswordPath = '/promoter/reset-password/{email}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `resetPassword()` instead.
   *
   * This method doesn't expect any request body.
   */
  resetPassword$Response(params: ResetPassword$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return resetPassword(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `resetPassword$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  resetPassword(params: ResetPassword$Params, context?: HttpContext): Observable<string> {
    return this.resetPassword$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getAllStaffs1()` */
  static readonly GetAllStaffs1Path = '/promoter/get-all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllStaffs1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllStaffs1$Response(params?: GetAllStaffs1$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePromoterResponse>> {
    return getAllStaffs1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllStaffs1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllStaffs1(params?: GetAllStaffs1$Params, context?: HttpContext): Observable<PageResponsePromoterResponse> {
    return this.getAllStaffs1$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePromoterResponse>): PageResponsePromoterResponse => r.body)
    );
  }

  /** Path part for operation `findStaffByEmail1()` */
  static readonly FindStaffByEmail1Path = '/promoter/find-by-email';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findStaffByEmail1()` instead.
   *
   * This method doesn't expect any request body.
   */
  findStaffByEmail1$Response(params: FindStaffByEmail1$Params, context?: HttpContext): Observable<StrictHttpResponse<PromoterResponse>> {
    return findStaffByEmail1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findStaffByEmail1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findStaffByEmail1(params: FindStaffByEmail1$Params, context?: HttpContext): Observable<PromoterResponse> {
    return this.findStaffByEmail1$Response(params, context).pipe(
      map((r: StrictHttpResponse<PromoterResponse>): PromoterResponse => r.body)
    );
  }

}
