package com.jotsamikael.applycam.activitySector;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;

import com.jotsamikael.applycam.course.CourseRepository;
import com.jotsamikael.applycam.speciality.SpecialityRepository;
import com.jotsamikael.applycam.user.User;

import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class SectorService {
	
	private final CourseRepository courseRepository;
	private final SectorRepository activitySectorRepository;
	private final SectorMapper mapper;
	
	public String createActivitySector(CreateActivitySectorRequest request, Authentication connectedUser) {
		
		User user = ((User) connectedUser.getPrincipal());
		
		if(activitySectorRepository.existsByName(request.getName())) {
   		 throw new DataIntegrityViolationException("Subject already created");
   	 };
   	 
   	 var activitySector = ActivitySector.builder()
   			 .name(request.getName())
   			 .code(request.getCode())
   			 .description(request.getDescription())
   			 .isActived(true)
   			 .isArchived(false)
   			 .build();
   	 
   	activitySectorRepository.save(activitySector);
   	return "create Sucess";
   	 
	}
	
	 public String updateActivitySector(String name, CreateActivitySectorRequest request) {
	        ActivitySector sector = activitySectorRepository.findByName(name)
	                .orElseThrow(() -> new EntityNotFoundException("Activity sector not found"));

	        sector.setName(request.getName());
	        sector.setCode(request.getCode());
	        sector.setDescription(request.getDescription());

	        return "update succesfull";
	    }

	    public void delete(Long id) {
	        if (!activitySectorRepository.existsById(id)) {
	            throw new EntityNotFoundException("Activity sector not found");
	        }
	        activitySectorRepository.deleteById(id);
	    }
	    
	    public List<ActivitySectorResponse> getAll() {
	        return activitySectorRepository.findAll().stream()
	                .map(mapper::mapToResponse)
	                .collect(Collectors.toList());
	    }

}
