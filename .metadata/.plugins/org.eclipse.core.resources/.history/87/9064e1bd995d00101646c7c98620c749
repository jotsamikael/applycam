package com.jotsamikael.applycam.speciality;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.jotsamikael.applycam.common.PageResponse;
import com.jotsamikael.applycam.course.CourseRequest;
import com.jotsamikael.applycam.course.CourseResponse;

import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/specialities")
@RequiredArgsConstructor
@Tag(name = "speciality")
public class SpecialityController {

    private final SpecialityService specialityService;

    @PatchMapping("/link-to-center")
    public ResponseEntity<String> addSpecialitiesToTrainingCenter(
            @RequestParam String agreementNumber,
            @RequestBody List<Long> specialityIds
    ) {
        String result = specialityService.addSpecialitiesToTrainingCenter(agreementNumber, specialityIds);
        return ResponseEntity.ok(result);
    }
    
    @GetMapping("/get-by-trainingcenter")
    public ResponseEntity<PageResponse<SpecialityResponse>> getAllSpecialityByTrainingCenter(
        @RequestParam Long trainingCenterId,
        @RequestParam(defaultValue = "0", required = false) int offset,
        @RequestParam(defaultValue = "10", required = false) int pageSize,
        @RequestParam(defaultValue = "name", required = false) String field,
        @RequestParam(defaultValue = "true", required = false) boolean order
    ){

    return ResponseEntity.ok(specialityService.getallSpecialityOfTrainingCenter(trainingCenterId,offset,pageSize, field,order));
    }
    
    @GetMapping("/get-by-course")
    public ResponseEntity<PageResponse<SpecialityResponse>> getAllSpecialityOfCourse(
        @RequestParam Long courseId,
        @RequestParam(defaultValue = "0", required = false) int offset,
        @RequestParam(defaultValue = "10", required = false) int pageSize,
        @RequestParam(defaultValue = "name", required = false) String field,
        @RequestParam(defaultValue = "true", required = false) boolean order
    ){

    return ResponseEntity.ok(specialityService.getAllSpecialityOfCourse(courseId,offset,pageSize, field,order));
    }
    
    @PostMapping("/create")
    public ResponseEntity<String> createSpeciality(@RequestBody @Valid CreateSpecialityRequest createSpecialityRequest,
    		Authentication connectedUser) {
    	
        return ResponseEntity.ok(specialityService.createSpeciality(createSpecialityRequest,connectedUser));
    }
    

    @GetMapping("/get-all")
    public ResponseEntity<PageResponse<SpecialityResponse>> getall( 
        @RequestParam(name = "offset", defaultValue = "0", required = false) int offset,
        @RequestParam(name = "pageSize", defaultValue = "10", required = false) int pageSize,
        @RequestParam(name = "field", defaultValue = "name", required = false) String field,
        @RequestParam(name = "order", defaultValue = "true", required = false) boolean order
){
    return ResponseEntity.ok(specialityService.getAllSpeciality( offset, pageSize, field, order));

}
    @PatchMapping("/update-speciality")
    public ResponseEntity<String> updateCourse(@RequestBody UpdateSpecialityRequest updateSpecialityeRequest,
     Authentication connectedUser) {
        specialityService.updateSpeciality(updateSpecialityeRequest,  connectedUser);
        return ResponseEntity.status(HttpStatus.OK).build();
 }
    
    @PatchMapping("/toggle-Speciality/{name}")
	 public ResponseEntity<?> toogleCourse(
			 @PathVariable String name,
			 Authentication connectedUser){
		 
		 specialityService.toggleSpeciality(name, connectedUser);
		 
		 return ResponseEntity.ok().build();
	 }
    
    
    @PatchMapping("/add-speciality-to-course")
    public ResponseEntity<String> addSpecialityToCourse(@RequestBody @Valid AddSpecialityRequest addSpecialityRequest) {

        return ResponseEntity.ok(specialityService.addSpecialityToCourse(addSpecialityRequest));

    }
    
    
    @GetMapping("/findByName/{name}")
    public ResponseEntity<SpecialityResponse> findByName(
        @PathVariable String name){

        
    return ResponseEntity.ok(specialityService.findByName(name));
        }
    
    
    @GetMapping("/get-by-Exam/{examType}")
    public ResponseEntity<PageResponse<SpecialityResponse>> getAllSpecialityOfCourse(
        @PathVariable String examType,
        @RequestParam(defaultValue = "0", required = false) int offset,
        @RequestParam(defaultValue = "10", required = false) int pageSize,
        @RequestParam(defaultValue = "name", required = false) String field,
        @RequestParam(defaultValue = "true", required = false) boolean order
    ){

    return ResponseEntity.ok(specialityService.findAllByExamType(examType,offset,pageSize, field,order));
    }
    @PatchMapping("/activate")
    public ResponseEntity<String> activateSpeciality(
            @RequestBody @Valid ActivateSpecialityRequest request,
            Authentication authentication
    ) {
        specialityService.activateAndAssignSpecialityToSession(request, authentication);
        return ResponseEntity.ok("Speciality activated and assigned to session successfully.");
    }
    
    @PostMapping("/add-specialities/{sessionId}")
    public ResponseEntity<String> addSpecialities(@PathVariable Long sessionId, @RequestBody List<Long> specialityIds) {
        return ResponseEntity.ok(specialityService.addSpecialitiesToSession(sessionId, specialityIds));
    }
}
    


}