package com.jotsamikael.applycam.payment;

import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.jotsamikael.applycam.candidate.CandidateRepository;
import com.jotsamikael.applycam.common.FileStorageService;
import com.jotsamikael.applycam.email.EmailService;
import com.jotsamikael.applycam.promoter.PromoterMapper;
import com.jotsamikael.applycam.promoter.PromoterRepository;
import com.jotsamikael.applycam.role.RoleRepository;
import com.jotsamikael.applycam.trainingCenter.TrainingCenterRepository;
import com.jotsamikael.applycam.user.TokenRepository;
import com.jotsamikael.applycam.user.User;
import com.jotsamikael.applycam.user.UserRepository;

import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class PaymentService {
	
	private final CandidateRepository candidateRepository;
	private final PaymentRepository paymentRepository;
	
	public String toPay(Authentication connectedUser,
			CreatePaymenRequest request) {
		
		User user = ((User) connectedUser.getPrincipal());
		
		candidateRepository.findByEmail(user.getEmail())
		.orElseThrow(()-> new EntityNotFoundException("You are not a candidate"));
		
		var payment=Payment.builder()
				.amount(request.getAmount())
				.paymentMethod(request.getPaymentMethod())
				.secretCode(request.getSecretCode())
				.isActived(true)
				.build();
		
		paymentRepository.save(payment);
		
		return "Succes";
	}
	
	public String updatePayment(Long id, CreatePaymenRequest request,Authentication connectedUser) {
		
		Payment payment= paymentRepository.findById(id)
				.orElseThrow(()-> new EntityNotFoundException("Payment not found"));
		
		payment.setAmount(request.getAmount());
		payment.setPaymentMethod(request.getPaymentMethod());
		payment.setSecretCode(request.getSecretCode());
		
		paymentRepository.save(payment);
		
		return "Update Success";
		
	}
	
	public void deletePayment(Long id)

}
