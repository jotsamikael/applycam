package com.jotsamikael.applycam.session;


import java.time.LocalDateTime;

import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;

import com.jotsamikael.applycam.user.User;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class SessionService {
	
	private SessionRepository sessionRepository;
	
	public String createSession(CreateSessionRequest createSessionRequest, Authentication connectedUser){
        User user=(User) connectedUser.getPrincipal();

        var session = Session.builder()
                .examType(createSessionRequest.getExamType())
                .examDate(createSessionRequest.getExamDate())
                .sessionYear(createSessionRequest.getSessionYear())
                .createdBy(user.getIdUser())
                .createdDate(LocalDateTime.now())
                isActived(true)
                .build();

        
        return sessionRepository.save(session).getSessionYear();
    }

    public Long updateSession(UpdateSessionRequest updateSessionRequest, Authentication connectedUser){
        User user=(User) connectedUser.getPrincipal();

        Session session= sessionRepository.findById(updateSessionRequest.getSessionId()).
        orElseThrow(()-> new EntityNotFoundException("Cette session n'existe pas"));

        session.setExamtype(updateSessionRequest.getExamType());
        session.setExamDate(updateSessionRequest.getExamDate());
        session.setSessionYear(updateSessionRequest.getSessionYear());
        session.setLastModifiedBy(user.getIdUser());
        session.setLastModifiedDate(LocalDateTime.now());

        sessionRepository.save(session);

        return session.getSessionId();
    }

    public PageResponse<SessionResponse> getAllSession(int offset, int pageSize, String field, boolean order) {
        Sort sort = order ? Sort.by(field).ascending() : Sort.by(field).descending();

        Page<Session> list= session.getAllSession(PageRequest.of(offset, pageSize, sort));

        List<SessionResponse> responses= list.getContent().stream().map(session->SessionResponse.builder()
        .examType(session.getExamType())
        .examDate(session.getExamDate())
        .examYear(session.getSessionYear())
        .build()).toList();

        return new PageResponse<>(
            responses,
            list.getNumber(),
            list.getSize(),
            list.getTotalElements(),
            list.getTotalPages(),
            list.isFirst(),
            list.isLast()
        );
    }

    public SessionResponses findBySessionYear(LocalDate examDate){

        Session session= sessionRepository.findByDate(examDate).
        orElseThrow(()->new EntityNotFoundException("This Session does not exist"));

        if (!session.isActived()){
            return SessionResponse.builder()
            .id(session.getId())
            .examType("This session was deleted.")
            .build();
           
        }
        return SessionResponse.builder()
        .id(session.getId())
        .examType(session.getexamType())
        .examDate(session.getExamDate())
        .examYear(session.getExamYear())
        .build();


    }

    public void deleteSession(Long sessionId, Authentication connectedUser){
        User user =(User) connectedUser.getPrincipal();
        Session session= sessionRepository.findById(sessionId)
        .orElseThrow(()->new EntityNotFoundException("Session Not found"));

        if(session.isActived()){
        	session.setActived(false);
        	session.setArchived(true);
            
        }else{
        	session.setActived(true);
        	session.setArchived(false);
        }
        session.setLastModifiedBy(user.getIdUser());
        session.setLastModifiedDate(LocalDateTime.now());

        sessionRepository.save(session);
    }

}
