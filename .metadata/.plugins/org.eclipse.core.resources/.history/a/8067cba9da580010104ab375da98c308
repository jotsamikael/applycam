package com.jotsamikael.applycam.promoter;

import com.jotsamikael.applycam.auth.RegistrationResponse;
import com.jotsamikael.applycam.centerStatus.TrainingCenterHistoryRepository;
import com.jotsamikael.applycam.centerStatus.TrainingCenterStatusHistory;
import com.jotsamikael.applycam.common.ContentStatus;
import com.jotsamikael.applycam.common.FileStorageService;
import com.jotsamikael.applycam.common.PageResponse;
import com.jotsamikael.applycam.email.EmailService;
import com.jotsamikael.applycam.email.EmailTemplateName;
import com.jotsamikael.applycam.exception.OperationNotPermittedException;
import com.jotsamikael.applycam.role.Role;
import com.jotsamikael.applycam.role.RoleRepository;
import com.jotsamikael.applycam.staff.*;
import com.jotsamikael.applycam.trainingCenter.CreateTainingCenterRequest;
import com.jotsamikael.applycam.trainingCenter.TrainingCenter;
import com.jotsamikael.applycam.trainingCenter.TrainingCenterRepository;
import com.jotsamikael.applycam.user.Token;
import com.jotsamikael.applycam.user.TokenRepository;
import com.jotsamikael.applycam.user.User;
import com.jotsamikael.applycam.user.UserRepository;
import jakarta.mail.MessagingException;
import jakarta.persistence.EntityNotFoundException;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ResponseStatusException;

import java.security.SecureRandom;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Period;
import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor



public class PromoterService {
    private final PromoterRepository repository;
    private final TrainingCenterRepository trainingCenterRepository;
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;
    private final EmailService emailService;
    private final PromoterMapper mapper;
    private final TokenRepository tokenRepository;
    private final FileStorageService fileStorageService;
    private final TrainingCenterHistoryRepository trainingCenterStatusHistoryRepository;

    @Value("${application.mailing.frontend.activation-url}")
    String activationUrl;

    public void createPromoter(
            Authentication connectedUser,
            @Valid  CreatePromoterAndCenterRequest request
    ) throws MessagingException {

    	Role userRole = roleRepository.findByName("PROMOTER")
                .orElseThrow(() -> new IllegalStateException("ROLE PROMOTER was not initialized"));

        // Vérification des doublons
        validateUniqueness(request);
        
        //verification du mot de pass
        validatePassword(request.getPassword(),request.getConfirmPassword());
        // Validation des dates
        validateCardValidityDate(request.getCniValidUntil());
        validateAgreementDate(request.getApprovalEnd(), request.getApprovalStart());
        
        calculateYearsOfExistence(request.getCreationDate());

        // Construction des entités
        Promoter promoter = buildPromoter(request, userRole);
        TrainingCenter trainingCenter = buildTrainingCenter(request, promoter);
        
        TrainingCenterStatusHistory trainingCenterStatusHistory = buildTrainingCenterStatusHistory(trainingCenter, "Promoter created");

        // Relation bidirectionnelle
        promoter.getTrainingCenterList().add(trainingCenter);

        // Sauvegarde en base
        repository.save(promoter);
        trainingCenter.setCreatedBy(promoter.getIdUser());
        trainingCenterRepository.save(trainingCenter);
        trainingCenterStatusHistoryRepository.save(trainingCenterStatusHistory);

        // Gestion des fichiers
       /* handleFileUploads(trainingCenter, promoter, request.getCniFile(), "CNI");
        handleFileUploads(trainingCenter, promoter, request.getApprovalFile(), "AGREEMENT");
        handleFileUploads(trainingCenter, promoter, request.getPromoterPhoto(), "PHOTO");
        handleFileUploads(trainingCenter, promoter, request.getEngagementLetter(), "SIGNATURE");
        handleFileUploads(trainingCenter, promoter, request.getLocationPlan(), "LOCALISATION");
        handleFileUploads(trainingCenter, promoter, request.getInternalRegulation(), "REGULATION");*/

        
    }
        // create the Promoter
       
    private void validatePassword(String password,String confirmPassword) {
        if (!password.equals(confirmPassword)) {
            throw new IllegalArgumentException("Password and confirm password do not match");
        }
    }

    private void validateUniqueness(CreatePromoterAndCenterRequest request) {
        if (userRepository.existsByEmail(request.getEmail())) {
            throw new DataIntegrityViolationException("Email already taken");
        }
        if (userRepository.existsByPhoneNumber(request.getPhone())) {
            throw new DataIntegrityViolationException("Phone number already taken");
        }
        if (userRepository.existsByNationalIdNumber(request.getCniNumber())) {
            throw new DataIntegrityViolationException("National ID already taken");
        }
        
    }

    private void validateCardValidityDate(LocalDate validUntil) {
        LocalDate currentDate = LocalDate.now();
        if (validUntil == null || !validUntil.isAfter(currentDate)) {
            throw new IllegalArgumentException("Your id Card is not Valid");
        }
    }
    
    private void validateAgreementDate(LocalDate validEnd,LocalDate validStart) {
        LocalDate currentDate = LocalDate.now();
        if (validEnd == null ||  validStart == null || !validEnd.isAfter(currentDate)) {
            throw new IllegalArgumentException("The agreement date is not valid");
        }
    }

    private Promoter buildPromoter(CreatePromoterAndCenterRequest req, Role userRole) {
        return Promoter.builder()
                .firstname(req.getFirstName())
                .lastname(req.getLastName())
                .email(req.getEmail())
                .nationality(req.getNationality())
                .SchoolLevel(req.getProfession())
                .dateOfBirth(LocalDate.parse(req.getBirthDate()))
                .phoneNumber(req.getPhone())
                .nationalIdNumber(req.getCniNumber())
                .address(req.getResidenceCity())
                .sex(req.getGender())
                .createdDate(LocalDateTime.now())
                .roles(List.of(userRole))
                .enabled(false)
                .accountLocked(false)
                .password(passwordEncoder.encode(req.getPassword()))
                .trainingCenterList(new ArrayList<>())
                .build();
    }

    private TrainingCenter buildTrainingCenter(CreatePromoterAndCenterRequest req, Promoter promoter) {
        return TrainingCenter.builder()
                .fullName(req.getCenterName())
                .acronym(req.getCenterAcronym())
                //.agreementNumber(req.getApprovalNumber())
                .centerType(req.getCenterType())
                .centerPhone(req.getCenterPhone())
                .centerEmail(req.getCenterEmail())
                .website(req.getWebsite())
                .division(req.getDepartement())
                .region(req.getRegion())
                .city(req.getCity())
                .fullAddress(req.getFullAddress())
                .startDateOfAgreement(req.getApprovalStart())
                .endDateOfAgreement(req.getApprovalEnd())
                .isCenterPresentCandidateForCqp(req.getIsCenterPresentCandidateForCqp())
                .isCenterPresentCandidateForDqp(req.getIsCenterPresentCandidateForDqp())
                .centerAge(calculateYearsOfExistence(req.getCreationDate()))
                .promoter(promoter)
                .createdDate(LocalDateTime.now())
                .build();
    }
    
    private  TrainingCenterStatusHistory buildTrainingCenterStatusHistory(TrainingCenter trainingCenter,String comment){
        return TrainingCenterStatusHistory.builder()
                .trainingCenter(trainingCenter)
                .comment(comment)
                .status(ContentStatus.DRAFT)
                .createdDate(LocalDateTime.now())
                .createdBy(0)
                .build();
    }
    
    public void uploadPromoterFile(MultipartFile cniFile,MultipartFile approvalFile, MultipartFile promoterPhoto,
    		MultipartFile engagementLetter,MultipartFile locationPlan,MultipartFile internalRegulation,
    		String approvalNumber,String email,String centerEmail) throws MessagingException {
    	
    	

         //check connected user is promoter
         Promoter promoter = repository.findByEmail(email).orElseThrow(() -> new EntityNotFoundException("Not a promoter"));
         
         if (trainingCenterRepository.existsByAgreementNumber(approvalNumber)) {
             throw new DataIntegrityViolationException("Agreement number already taken");
         }
         
         TrainingCenter trainingCenter= trainingCenterRepository.findByCenterEmail(centerEmail).orElseThrow(()->new EntityNotFoundException("this is not a training center"));
    	trainingCenter.setAgreementNumber(approvalNumber);
    	
    	trainingCenterRepository.save(trainingCenter);
    	handleFileUploads(trainingCenter, promoter, cniFile, "CNI");
        handleFileUploads(trainingCenter, promoter, approvalFile, "AGREEMENT");
        handleFileUploads(trainingCenter, promoter, promoterPhoto, "PHOTO");
        handleFileUploads(trainingCenter, promoter, engagementLetter, "SIGNATURE");
        handleFileUploads(trainingCenter, promoter, locationPlan, "LOCALISATION");
        handleFileUploads(trainingCenter, promoter, internalRegulation, "REGULATION");
        
        trainingCenterRepository.save(trainingCenter);
        repository.save(promoter);
     // Envoi d'email
        emailService.sendWaitingForValidationEmail(promoter, trainingCenter);
    }
    
    public void reUploadPromoterFile(MultipartFile cniFile,MultipartFile approvalFile, MultipartFile promoterPhoto,
    		MultipartFile engagementLetter,MultipartFile locationPlan,MultipartFile internalRegulation,
    		String approvalNumber,String email,String centerEmail) throws MessagingException {
    	
    	

         //check connected user is promoter
         Promoter promoter = repository.findByEmail(email).orElseThrow(() -> new EntityNotFoundException("Not a promoter"));
         
         if (trainingCenterRepository.existsByAgreementNumber(approvalNumber)) {
             throw new DataIntegrityViolationException("Agreement number already taken");
         }
         
         TrainingCenter trainingCenter= trainingCenterRepository.findByCenterEmail(centerEmail).orElseThrow(()->new EntityNotFoundException("this is not a training center"));
    	trainingCenter.setAgreementNumber(approvalNumber);
    	
    	trainingCenterRepository.save(trainingCenter);
    	handleFileUploads(trainingCenter, promoter, cniFile, "CNI");
        handleFileUploads(trainingCenter, promoter, approvalFile, "AGREEMENT");
        handleFileUploads(trainingCenter, promoter, promoterPhoto, "PHOTO");
        handleFileUploads(trainingCenter, promoter, engagementLetter, "SIGNATURE");
        handleFileUploads(trainingCenter, promoter, locationPlan, "LOCALISATION");
        handleFileUploads(trainingCenter, promoter, internalRegulation, "REGULATION");
        
        trainingCenterRepository.save(trainingCenter);
        repository.save(promoter);
    }

    private void handleFileUploads(TrainingCenter trainingCenter,Promoter promoter, MultipartFile file,String fileType) {
        if (file != null && !file.isEmpty()) {
            String url = fileStorageService.saveFile(file, promoter.getIdUser(),fileType);
            switch (fileType) {
            case "CNI" -> promoter.setNationalIdCardUrl(url);
            case "AGREEMENT" -> trainingCenter.setAgreementFileUrl(url);
            case "PHOTO" -> promoter.setPhotoUrl(url);
            case "SIGNATURE" -> trainingCenter.setSignatureLetterUrl(url);
            case "LOCALISATION" -> trainingCenter.setLocalisationFileUrl(url);
            case "REGULATION" -> trainingCenter.setInternalRegulationFileUrl(url);
            default -> throw new IllegalArgumentException("we do not handel this folder.");
        }
           // repository.save(promoter); // met à jour le promoteur
        } else {
            throw new IllegalArgumentException("missing file");
        }
    }
    
    public int calculateYearsOfExistence(LocalDate createdDate) {
        LocalDate today = LocalDate.now();
        if (createdDate != null && !createdDate.isAfter(today)) {
            return Period.between(createdDate, today).getYears();
        } else {
            throw new IllegalArgumentException("La date de création est invalide.");
        }
    }
    

    public PageResponse<PromoterResponse> getAllPromoter(int offset, int pageSize, String field, boolean order) {
        Sort sort = order ? Sort.by(field).ascending() : Sort.by(field).descending();

        Page<Promoter> list = repository.getAllPromoters(
                PageRequest.of(offset, pageSize, sort));

        List<PromoterResponse> responses = list.stream().map(mapper::toPromoterResponse).toList();
        return new PageResponse<>(
                responses,
                list.getNumber(),
                list.getSize(),
                list.getTotalElements(),
                list.getTotalPages(),
                list.isFirst(),
                list.isLast()
        );
    }

    public PromoterResponse findPromoterByEmail(String email) {
        //get promoter by email of throw exception
        Promoter promoter = repository.findByEmail(email).orElseThrow(()-> new EntityNotFoundException("No Promoter Member found with email: "+email));
        return mapper.toPromoterResponse(promoter);
    }

    public String updateProfile(String email, CreatePromoterRequest request, Authentication connectedUser) {
        //start by getting the staff by email or throw an exception
        Promoter promoter = repository.findByEmail(email).orElseThrow(()-> new EntityNotFoundException("No promoter with found email"+ email));
        
        if (!promoter.isActived() ) {
        	throw new ResponseStatusException(HttpStatus.FORBIDDEN, "This Subject cannot be updated.");
        }

        //modify the staff object using the request data
        promoter.setFirstname(request.getFirstname());
        promoter.setLastname(request.getLastname());
        promoter.setDateOfBirth(LocalDate.parse(request.getDateOfBirth()));
        promoter.setPhoneNumber(request.getPhoneNumber());
        promoter.setNationalIdNumber(request.getNationalIdNumber());
        promoter.setAddress(request.getAddress());
        promoter.setLastModifiedDate(LocalDateTime.now());


        //get connected user and date time for audit purpose
        User user = ((User) connectedUser.getPrincipal());
        promoter.setLastModifiedBy(user.getIdUser());

        //save the modified candidate object
        repository.save(promoter);

        //return
        return email;
    }


    private String generateActivationCode(int length) {
        String characters = "0123456789";
        StringBuilder codeBuilder = new StringBuilder();//to transform to string
        SecureRandom secureRandom = new SecureRandom(); //cryptographically secured
        for (int i = 0; i < length; i++) {
            int randomIndex = secureRandom.nextInt(characters.length()); //0..9
            codeBuilder.append(characters.charAt(randomIndex));//append the caracter sercurily and ramdomly created
        }
        return codeBuilder.toString();
    }

    private String generateAndSaveActivationToken(User user) {
        //generate a token
        String generatedToken = generateActivationCode(6);//generate a 6 digit code
        var token = Token.builder()
                .token(generatedToken)
                .createdAt(LocalDateTime.now())
                .expiresAt(LocalDateTime.now().plusMinutes(15))
                .user(user)
                .build();
        tokenRepository.save(token);


        return generatedToken;
    }

    private void sendValidationEmail(User user) throws MessagingException {
        var newToken = generateAndSaveActivationToken(user);
        //send email
        emailService.sendEmail( //use the service to send the email
                user.getEmail(),
                user.getFirstname(),
                EmailTemplateName.ACTIVATE_ACCOUNT,
                activationUrl,
                newToken,
                "Account activation"
        );

    }
    public String resetPassword(String email, Authentication connectedUser) throws MessagingException {

        //start by getting the promoter by email or throw an exception
        Promoter promoter = repository.findByEmail(email).orElseThrow(()-> new EntityNotFoundException("No promoter with found email"+ email));
        //generate new password
        String activationCode = generateActivationCode(8);//generate a random password

        //modify the promoter's password
        promoter.setPassword(passwordEncoder.encode(activationCode)); //set a random password

        //get connected user and date time for audit purpose
        User user = ((User) connectedUser.getPrincipal());
        promoter.setLastModifiedBy(user.getIdUser());
        promoter.setLastModifiedDate(LocalDateTime.now());

        //save the modified candidate object
        repository.save(promoter);

        //send email with new password
        sendResetPasswordEmail(email, activationCode);
        return repository.save(promoter).getEmail();
    }

    private void sendResetPasswordEmail(String email, String newPassword) throws MessagingException {
        emailService.sendEmail(
                email,
                email,
                EmailTemplateName.ACTIVATE_ACCOUNT,
                newPassword,
                null,
                "Account activation"
        );
    }
    public void togglePromoter(String email, Authentication connectedUser) {
        Promoter promoter = repository.findByEmail(email)
                .orElseThrow(() -> new EntityNotFoundException("No promoter found with email: " + email));
        
        User user = (User) connectedUser.getPrincipal();
        if (promoter.isActived()) {
            // Désactivation
            promoter.setEnabled(false);
            promoter.setActived(false);
            promoter.setArchived(true);
        } else {
            // Réactivation
            promoter.setEnabled(true);
            promoter.setActived(true);
            promoter.setArchived(false);
        }
      //get connected user and date time for audit purpose
        promoter.setLastModifiedBy(user.getIdUser());
        promoter.setLastModifiedDate(LocalDateTime.now());
        // saving the promoter and it status
        repository.save(promoter);
        
        
    }
    
    
    public String validatePromoter(String email, Authentication connectedUser) {
 	   
 	   User user= (User) connectedUser.getPrincipal();
 	   
 	   /* TrainingCenter trainingCenter = trainingCenterRepository
 	        .findByFullName(fullName)
 	        .orElseThrow(() -> new EntityNotFoundException("Training center not found: " + fullName));

 	    TrainingCenterStatusHistory statusHistory = trainingCenterStatusHistoryRepository
 	        .findByTrainingCenter(trainingCenter)
 	        .orElseThrow(() -> new EntityNotFoundException("Status history not found for: " + trainingCenter.getAgreementNumber()));

 	    statusHistory.setStatus(ContentStatus.VALIDATED);
 	    statusHistory.setActived(true);
 	    statusHistory.setLastModifiedBy(user.getIdUser());
 	    statusHistory.setLastModifiedDate(LocalDateTime.now());
 	    trainingCenterStatusHistoryRepository.save(statusHistory);*/

 	    try {
 	        Promoter promoter = repository.findByEmail(email).orElseThrow(() -> new EntityNotFoundException("No promoter found with email: " + email));; // ou trainingCenter.getUser()
 	        promoter.setEnabled(true);
 	        userRepository.save(promoter);
 	        // 1. Envoyer email de validation simple
 	        emailService.sendPromoterValidationEmail(
 	                promoter.getEmail(),
 	                promoter.fullName(),
 	      
 	                "promoterer_validation", // nom du template
 	                "Vous avez été validé avec succès"
 	        );

 	        // 2. Envoyer email d’activation avec token
 	        //sendValidationEmail(promoter);

 	    } catch (MessagingException e) {
 	        throw new RuntimeException("Échec d’envoi d’email", e);
 	    }

 	    return "VALIDATED";
 	}
    
    
    /*public void nationalIdCardFileUpload(MultipartFile file, Authentication connectedUser,LocalDate validUntil,String nationalIdNumber) {
    	
    	// to See if the Current Date is not Empty or Null	
    	 LocalDate currentDate = LocalDate.now();
    	    if (validUntil == null || !validUntil.isAfter(currentDate)) {
    	        throw new IllegalArgumentException("La date de validité de la carte doit être postérieure à la date actuelle.");
    	    }
    	    
    	    //to Verify that the id is uniaue
    	    if (userRepository.existsByNationalIdNumber(nationalIdNumber)) {
    	        throw new IllegalArgumentException("Ce numéro de carte nationale est déjà utilisé.");
    	    }
        //get user object from connected user
        User user = ((User) connectedUser.getPrincipal());

        //check connected user is promoter
        Promoter promoter = repository.findByEmail(user.getEmail()).orElseThrow(() -> new EntityNotFoundException("Not a promoter" + user.getEmail()));

        
        var nationalIdCardUrl = fileStorageService.saveFile(file, promoter.getIdUser());
         promoter.setNationalIdCardUrl(nationalIdCardUrl);//set the nationalId card url of the promoter
         repository.save(promoter);*/
    }
    
    


		
	

