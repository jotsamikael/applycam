package com.jotsamikael.applycam.course;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;

import com.jotsamikael.applycam.promoter.Promoter;
import com.jotsamikael.applycam.promoter.PromoterRepository;
import com.jotsamikael.applycam.speciality.Speciality;
import com.jotsamikael.applycam.speciality.SpecialityRepository;
import com.jotsamikael.applycam.user.User;

import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class CourseService {

	private final CourseRepository courseRepository;
	
	private final SpecialityRepository specialityRepository;

    public String createCourse(CreateCourseRequest courseRequest,  Authentication connectedUser) {

		User user = ((User) connectedUser.getPrincipal());

		 
		var course = Course.builder()
		.name(courseRequest.getName())
		.code(courseRequest.getCode())
		.description(courseRequest.getDescription())
		.createdBy(user.getIdUser())
	    .createdDate(LocalDateTime.now())
		.build();

		courseRepository.save(course);
		return course.getName();
		
    }
    
    public String UpdateCourse(CourseRequest courseRequest,  Authentication connectedUser) {

        Course course = courseRepository.findById(courseRequest.getId()).orElseThrow(() -> new EntityNotFoundException("Course not found"));

        course.setName(courseRequest.getName());
        course.setCode(courseRequest.getCode());
        course.setDescription(courseRequest.getDescription());

        courseRepository.save(course);
        return course.getName();
    }
    
    /*public Map<String, Object> getCoursesBySpecialit( CourseRequest  courseRequest,int offset, int pageSize, String field, boolean order) {
    	 Sort sort = order ? Sort.by(field).ascending() : Sort.by(field).descending();
    	 
        Speciality speciality = specialityRepository.findById(courseRequest.getSpecialityiId())
            .orElseThrow(() -> new EntityNotFoundException("Speciality not found   " ));
        
        
        Page<Course> coursesPage = courseRepository.findBySpecialityId(courseRequest.getSpecialityiId(),  PageRequest.of(offset, pageSize,sort));
        
        List<CourseResponse> courseResponses = coursesPage.getContent().stream()
            .map(course -> CourseResponse.builder()
                .name(course.getName())
                .code(course.getCode())
                .description(course.getDescription())
                .build())
            .toList();
        
        Map<String, Object> response = new HashMap<>();
        response.put("speciality", speciality);
        response.put("courses", courseResponses);
        response.put("currentPage", coursesPage.getNumber());
        response.put("totalPages", coursesPage.getTotalPages());
        response.put("totalElements", coursesPage.getTotalElements());
        
        return response;
    }*/
}
