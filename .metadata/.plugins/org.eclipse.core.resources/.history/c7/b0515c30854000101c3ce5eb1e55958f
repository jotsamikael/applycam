package com.jotsamikael.applycam.session;

import java.time.LocalDate;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.jotsamikael.applycam.common.PageResponse;
import com.jotsamikael.applycam.speciality.SpecialityService;

import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/session")
@RequiredArgsConstructor
@Tag(name = "session")
public class SessionController {
	
	private final SessionService sessionService;
	
	
	 @PostMapping("/create")
	    public ResponseEntity<String> createSession(@RequestBody @Valid CreateSessionRequest createSessionRequest,
	    		Authentication connectedUser) {
	    	
	        return ResponseEntity.ok(sessionService.createSession(createSessionRequest,connectedUser));
	    }


	    @GetMapping("/get-all")
	    public ResponseEntity<PageResponse<SessionResponse>> getall( 
	        @RequestParam(name = "offset", defaultValue = "0", required = false) int offset,
	        @RequestParam(name = "pageSize", defaultValue = "10", required = false) int pageSize,
	        @RequestParam(name = "field", defaultValue = "name", required = false) String field,
	        @RequestParam(name = "order", defaultValue = "true", required = false) boolean order
	){
	    return ResponseEntity.ok(sessionService.getAllSession( offset, pageSize, field, order));

	}

	@GetMapping("/get-by-year/{sessionYear}")
	    public ResponseEntity<PageResponse<SessionResponse>> findSessionByYear(
	        @PathVariable String sessionYear ,
	        @RequestParam(defaultValue = "0", required = false) int offset,
	        @RequestParam(defaultValue = "10", required = false) int pageSize,
	        @RequestParam(defaultValue = "name", required = false) String field,
	        @RequestParam(defaultValue = "true", required = false) boolean order
	    ){

	    return ResponseEntity.ok(sessionService.findSessionByYear(sessionYear,offset,pageSize, field,order));
	    }

	    @GetMapping("/findBy-examdate/{examDate}")
	    public ResponseEntity<SessionResponse> findByName(
	        @PathVariable LocalDate examDate){

	        
	    return ResponseEntity.ok(sessionService.findByExamDate(examDate));
	        }

	        @PatchMapping("/delete-session/{sessionId}")
		 public ResponseEntity<?> deleteSession(
				 @PathVariable Long sessionId,
				 Authentication connectedUser){
			 
			 sessionService.deleteSession(sessionId, connectedUser);
			 
			 return ResponseEntity.ok().build();
		 }

	     @PatchMapping("/update-session")
	    public ResponseEntity<Long> updateSession(@RequestBody UpdateSessionRequest updateSessionRequest,
	     Authentication connectedUser) {
	        sessionService.updateSession(updateSessionRequest,  connectedUser);
	        return ResponseEntity.status(HttpStatus.OK).build();
	 }

	

}
